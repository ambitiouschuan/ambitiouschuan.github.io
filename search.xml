<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python 爬虫</title>
    <url>/2020/07/02/Python-%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h2 id="url详解："><a href="#url详解：" class="headerlink" title="url详解："></a>url详解：</h2><p>一个URL 由一下几个部分组成：</p>
<p>{协议}：//{用户名}:{密码}@{主机名}:{端口号}/{路径}/{文件}?{参数}</p>
<p><strong>1.</strong>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符</p>
<p><strong>2.</strong>域名部分：该URL的域名部分为“www.##########.com”。一个URL中，也可以使用IP地址作为域名使用</p>
<p><strong>3.</strong>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</p>
<p><strong>4.</strong>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</p>
<p><strong>5.</strong>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</p>
<p><strong>6.</strong>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</p>
<p><strong>7.</strong>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>商务礼仪学习</title>
    <url>/2020/06/24/%E5%95%86%E5%8A%A1%E7%A4%BC%E4%BB%AA%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>常用的商务礼仪Get！</p>
<a id="more"></a>

<h2 id="乘车礼仪"><a href="#乘车礼仪" class="headerlink" title="乘车礼仪"></a>乘车礼仪</h2><p>小轿车座次礼仪：</p>
<p>若同坐多人，中途坐前的客人下车后，在后面坐的客人应改坐前座。</p>
<p><img src="/uploads/loading.gif" data-original="%E4%B9%98%E8%BD%A6%E7%A4%BC%E4%BB%AA.png" alt></p>
<p>旅行车座次礼仪：</p>
<p>司机座后第一排即前排为尊，后排依次为小。其座位的尊卑，依每排右侧往左侧递减</p>
<p>吉普车座次礼仪：</p>
<p>无论是主人驾驶还是司机驾驶，都应以前排右座为尊，后排右侧次之，后排左侧为末席。上车时，后排位低者先上车，前排尊者后上。下车时前排客人先下，后排客人再下车。</p>
<h2 id="商务会客礼仪"><a href="#商务会客礼仪" class="headerlink" title="商务会客礼仪"></a>商务会客礼仪</h2><p>应视会客的对象、地点选择相应的服饰；如作为主方，则应提前安排好场地和相关细节，切不可迟到；作为被邀请方，迟到也不宜超过5分钟</p>
<p><img src="/uploads/loading.gif" data-original="%E4%BC%9A%E5%AE%A2%E5%85%A5%E5%BA%A7.png" alt></p>
<h2 id="握手礼仪"><a href="#握手礼仪" class="headerlink" title="握手礼仪"></a>握手礼仪</h2><ol>
<li>上下级之间，上级伸手后，下级才能伸手相握；</li>
<li>长辈与晚辈之间，长辈伸手后，晚辈才能伸手相握；</li>
<li>男女之间，女士伸手后，男士才能伸手相握；</li>
<li>握手时，男士应脱下手套，女士如戒指戴在手套外面可不脱手套；</li>
<li>握手时应伸出右手，绝不可伸出左手；</li>
<li>握手时的力量要把握适中，既不可有气无力，也不能太用力。</li>
</ol>
<h2 id="交流用语"><a href="#交流用语" class="headerlink" title="交流用语"></a>交流用语</h2><p>初次见面：幸会                                  请人解答：请问</p>
<p>看望别人：拜访                                  赞人见解：高见</p>
<p>等候别人：恭候                                  归还原物：奉还</p>
<p>请人勿送：留步                                  求人原谅：包涵</p>
<p>麻烦别人：打扰                                  老人年龄：高寿</p>
<p>求给方便：借光                                  好久不见：久违</p>
<p>托人办事：拜托                                  客人来到：光临</p>
<p>请人指教：请教                                  中途先走：失陪</p>
<p>他人指点：赐教                                  与人分别：告辞</p>
<h2 id="礼仪介绍"><a href="#礼仪介绍" class="headerlink" title="礼仪介绍"></a>礼仪介绍</h2><p>1.介绍他人认识：先低后高，先主后客，先晚辈后长辈，先个人后集体</p>
<p>2.“请允许我向您介绍” ，“请允许我自我介绍”</p>
<p>3.打招呼男士为先，握手女士为先</p>
<p>4.介绍手势：手掌向上，五指并拢，伸向被介绍者，不能用手指指指点点；当别人介绍你时，应微笑或握手点点头，如果你正坐着，应该起立</p>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>实用技能学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python!</title>
    <url>/2020/06/23/Python/</url>
    <content><![CDATA[<p>Python 学习记录</p>
<a id="more"></a>

<h1 id="基础学习"><a href="#基础学习" class="headerlink" title="基础学习"></a>基础学习</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#       你要注释的内容</span></span><br></pre></td></tr></table></figure>

<p>多行注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">        你要注释的内容</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><h5 id="文本输出"><a href="#文本输出" class="headerlink" title="文本输出"></a>文本输出</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello!"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'0----'</span>)</span><br><span class="line">print(<span class="string">' ||||'</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Hello!<br>0—-<br> ||||</p>
<h5 id="重复文本输出"><a href="#重复文本输出" class="headerlink" title="重复文本输出"></a>重复文本输出</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'&amp;'</span> * <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</p>
<h5 id="给参数赋值输出"><a href="#给参数赋值输出" class="headerlink" title="给参数赋值输出"></a>给参数赋值输出</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">price = <span class="number">10</span></span><br><span class="line">price = <span class="number">20</span></span><br><span class="line">print(price)</span><br><span class="line"></span><br><span class="line">rating = <span class="number">4.9</span></span><br><span class="line">is_published = <span class="literal">False</span></span><br><span class="line">print(price)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>20<br>20</p>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><h5 id="输入数据，输出结果"><a href="#输入数据，输出结果" class="headerlink" title="输入数据，输出结果"></a>输入数据，输出结果</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">'What is your name? '</span>)</span><br><span class="line">print(<span class="string">'Hi '</span> + name )</span><br></pre></td></tr></table></figure>

<h5 id="复合用法"><a href="#复合用法" class="headerlink" title="复合用法"></a>复合用法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">'What is your name? '</span>)</span><br><span class="line">favorite_color = input(<span class="string">'What is your favorite color? '</span>)</span><br><span class="line">print( name + <span class="string">' likes '</span> + favorite_color)</span><br></pre></td></tr></table></figure>

<h5 id="参数运算"><a href="#参数运算" class="headerlink" title="参数运算"></a>参数运算</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">birth_year = input(<span class="string">'Birth year: '</span>)</span><br><span class="line">age = <span class="number">2020</span> - int(birth_year)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">birth_year = input(<span class="string">'Birth year: '</span>)</span><br><span class="line">print(type(birth_year))</span><br><span class="line">age = <span class="number">2019</span> - int(birth_year)</span><br><span class="line">print(type(age))</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weight_lbs = input(<span class="string">'Weight(lbs: '</span>)</span><br><span class="line">weight_kg  = int(weight_lbs) * <span class="number">0.45</span></span><br><span class="line">print(weight_kg)</span><br></pre></td></tr></table></figure>





<h2 id="‘-和-的用法"><a href="#‘-和-的用法" class="headerlink" title="‘     :   和[ ]   的用法"></a>‘     :   和[ ]   的用法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">course = <span class="string">" Pythong's Course for Beginners "</span></span><br><span class="line">print(course)</span><br><span class="line"></span><br><span class="line">course = <span class="string">'Python for "Begenners" '</span></span><br><span class="line">print(course)</span><br><span class="line"></span><br><span class="line">course =<span class="string">'''</span></span><br><span class="line"><span class="string">Hi John,</span></span><br><span class="line"><span class="string">Here is your first email to you.</span></span><br><span class="line"><span class="string">Thank you,</span></span><br><span class="line"><span class="string">The support team</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(course)</span><br><span class="line"></span><br><span class="line">course = <span class="string">'Python for Beginnners'</span></span><br><span class="line">print(course[<span class="number">0</span>])</span><br><span class="line">print(course[<span class="number">-2</span>])</span><br><span class="line">print(course[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">print(course[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print(course[:<span class="number">5</span>])</span><br><span class="line">another = course[ : ]</span><br><span class="line">print(course)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p> Pythong’s Course for Beginners<br>Python for “Begenners” </p>
<p>Hi John,<br>Here is your first email to you.<br>Thank you,<br>The support team</p>
<p>P<br>r<br>Pyt<br>yt<br>Pytho<br>Python for Beginnners<br>ennife</p>
<h5 id="负数的情况"><a href="#负数的情况" class="headerlink" title="负数的情况"></a>负数的情况</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">'Jennifer'</span></span><br><span class="line">print(name[<span class="number">1</span> : <span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>ennife</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first = <span class="string">'John'</span></span><br><span class="line">last = <span class="string">'Smith'</span></span><br><span class="line">message = first + <span class="string">' [ '</span> + last + <span class="string">' ]  is a coder '</span></span><br><span class="line">print(message)</span><br><span class="line">msg = <span class="string">f'<span class="subst">&#123;first&#125;</span> [<span class="subst">&#123;last&#125;</span>] is a coder'</span></span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>John [ Smith ]  is a coder<br>John [Smith] is a coder</p>
<h2 id="len的用法–计算字符串的长度"><a href="#len的用法–计算字符串的长度" class="headerlink" title="len的用法–计算字符串的长度"></a>len的用法–计算字符串的长度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">course = <span class="string">'Python for Beginners'</span></span><br><span class="line">print(len(course))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>20</p>
<h2 id="常见函数的用法"><a href="#常见函数的用法" class="headerlink" title="常见函数的用法"></a>常见函数的用法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">course = <span class="string">'Python for Beginners'</span></span><br><span class="line">print(course.upper())   <span class="comment">#转换为大写</span></span><br><span class="line">print(course)   <span class="comment">#没有修改原格式</span></span><br><span class="line">print(course.lower())</span><br><span class="line">print(course.find(<span class="string">'P'</span>))  <span class="comment">#寻找位置</span></span><br><span class="line">print(course.find(<span class="string">'O'</span>))   <span class="comment">#没有大写的o</span></span><br><span class="line">print(course.find(<span class="string">'Beginners'</span>))</span><br><span class="line">print(course.replace(<span class="string">'Beginners'</span> , <span class="string">'Absolute Beginners'</span> ))  <span class="comment">#替换</span></span><br><span class="line">print(course.replace(<span class="string">'P'</span> , <span class="string">'J'</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Python'</span> <span class="keyword">in</span> course)    <span class="comment"># is 'python' in course?</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>PYTHON FOR BEGINNERS<br>Python for Beginners<br>python for beginners<br>0<br>-1<br>11<br>Python for Absolute Beginners<br>Jython for Beginners<br>True</p>
<h2 id="常见运算"><a href="#常见运算" class="headerlink" title="常见运算"></a>常见运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print( <span class="number">10</span> / <span class="number">3</span> )</span><br><span class="line">print( <span class="number">10</span> // <span class="number">3</span> )</span><br><span class="line">print( <span class="number">10</span> % <span class="number">3</span> )</span><br><span class="line">print( <span class="number">10</span> ** <span class="number">3</span> )</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">x = x + <span class="number">3</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">x += <span class="number">3</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">x -= <span class="number">3</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>3.3333333333333335<br>3<br>1<br>1000<br>13<br>13<br>7</p>
<h2 id="优先级-运算"><a href="#优先级-运算" class="headerlink" title="优先级 运算"></a>优先级 运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span> + <span class="number">3</span> * <span class="number">2</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>16</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span> + <span class="number">3</span> * <span class="number">2</span>**<span class="number">2</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = (<span class="number">10</span> + <span class="number">3</span>) * <span class="number">2</span>**<span class="number">2</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = (<span class="number">2</span> + <span class="number">3</span>) * <span class="number">10</span> - <span class="number">3</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>22<br>52<br>47</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x= <span class="number">2.9</span></span><br><span class="line">print(round(x))</span><br><span class="line">print(abs(<span class="number">-2.9</span>))  <span class="comment">#绝对值</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>3<br>2.9</p>
<h2 id="导入模块与模块内函数-import"><a href="#导入模块与模块内函数-import" class="headerlink" title="导入模块与模块内函数  import"></a>导入模块与模块内函数  import</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">print(math.ceil(<span class="number">2.9</span>))</span><br><span class="line">print(math.floor(<span class="number">2.9</span>))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>3<br>2</p>
<h2 id="if-函数"><a href="#if-函数" class="headerlink" title="if 函数"></a>if 函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_hot = <span class="literal">False</span></span><br><span class="line">is_cold = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_hot:</span><br><span class="line">    print(<span class="string">"It's a hot day"</span>)</span><br><span class="line">    print(<span class="string">"Drink plenty water"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"It's a cold day"</span>)</span><br><span class="line">    print(<span class="string">"Wear warm clothes"</span>)</span><br><span class="line">print(<span class="string">"Enjoy your day!"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>It’s a cold day<br>Wear warm clothes<br>Enjoy your day!</p>
<h2 id="if-elif-函数"><a href="#if-elif-函数" class="headerlink" title="if   elif 函数"></a>if   elif 函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_hot = <span class="literal">False</span></span><br><span class="line">is_cold = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_hot:</span><br><span class="line">    print(<span class="string">"It's a hot day"</span>)</span><br><span class="line">    print(<span class="string">"Drink plenty water"</span>)</span><br><span class="line"><span class="keyword">elif</span> is_cold:</span><br><span class="line">    print(<span class="string">"It's a cold day"</span>)</span><br><span class="line">    print(<span class="string">"Wear warm clothes"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"It's a lovely day"</span>)</span><br><span class="line">print(<span class="string">"Enjoy your day!"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>It’s a cold day<br>Wear warm clothes<br>Enjoy your day!</p>
<h2 id="格式化字符串常量"><a href="#格式化字符串常量" class="headerlink" title="格式化字符串常量"></a>格式化字符串常量</h2><p>格式化字符串常量formatted string literals(形式上是以f或F修饰符引领的字符串 f’xxx’ 以{ } 标明被替换的字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">price = <span class="number">1000000</span></span><br><span class="line">has_good_credit = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> has_good_credit:</span><br><span class="line">    down_payment = <span class="number">0.1</span> * price</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    down_payment = <span class="number">0.2</span> * price</span><br><span class="line">print(<span class="string">f"Down payment: $<span class="subst">&#123;down_payment&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Down payment: $100000.0</p>
<h2 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">has_high_income = <span class="literal">False</span></span><br><span class="line">has_high_credit = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> has_high_income <span class="keyword">and</span> has_high_credit:</span><br><span class="line">    print(<span class="string">"Eligible for loan"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>​                   (无结果)</p>
<h2 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">has_high_income = <span class="literal">False</span></span><br><span class="line">has_high_credit = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> has_high_income <span class="keyword">or</span> has_high_credit:</span><br><span class="line">    print(<span class="string">"Eligible for loan"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Eligible for loan</p>
<h2 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">has_high_credit = <span class="literal">True</span></span><br><span class="line">has_criminal_record = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> has_high_credit <span class="keyword">and</span> <span class="keyword">not</span> has_criminal_record:</span><br><span class="line">    print(<span class="string">"Eligible for loan"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Eligible for loan</p>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temperature = <span class="number">35</span></span><br><span class="line"><span class="keyword">if</span> temperature &gt;= <span class="number">30</span>:      <span class="comment">#  ==  &gt;=  !=</span></span><br><span class="line">    print(<span class="string">"It's a hot day"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"It's not a hot day"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>It’s a hot day</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"John Smith"</span></span><br><span class="line"><span class="keyword">if</span> len(name) &lt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"Name must be at least 3 character"</span>)</span><br><span class="line"><span class="keyword">elif</span> len(name) &gt; <span class="number">50</span>:</span><br><span class="line">    print(<span class="string">"Name must be a maximum of 50 character"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Name looks good!"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Name looks good!</p>
<h2 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Wight = int(input(<span class="string">'Wight: '</span>))</span><br><span class="line">unit = input(<span class="string">"(L)bs or (K)g:"</span> )</span><br><span class="line"><span class="keyword">if</span> unit.upper() == <span class="string">"L"</span>:</span><br><span class="line">    converted = Wight * <span class="number">0.45</span></span><br><span class="line">    print(<span class="string">f'You are <span class="subst">&#123;converted&#125;</span> kilos'</span>)</span><br><span class="line"><span class="keyword">elif</span> unit.upper() == <span class="string">"K"</span>:</span><br><span class="line">    converted = Wight / <span class="number">0.45</span></span><br><span class="line">    print(<span class="string">f"You are<span class="subst">&#123;converted&#125;</span> pounds"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"error!"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Wight: <em>56</em><br>(L)bs or (K)g:<em>L</em><br>You are 25.2 kilos</p>
<h2 id="循环-while"><a href="#循环-while" class="headerlink" title="循环  while"></a>循环  while</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    print(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">print(<span class="string">"Done"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>1<br>2<br>3<br>4<br>5<br>Done</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    print(<span class="string">"*"</span> * i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">print(<span class="string">"Done"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">Done</span><br></pre></td></tr></table></figure>

<h2 id="猜数游戏"><a href="#猜数游戏" class="headerlink" title="猜数游戏"></a>猜数游戏</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">secret_number = <span class="number">9</span></span><br><span class="line">guess_count = <span class="number">0</span></span><br><span class="line">guess_limit = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> guess_count &lt; guess_limit:</span><br><span class="line">    guess = int(input(<span class="string">'Guess: '</span>))</span><br><span class="line">    guess_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> guess == secret_number:</span><br><span class="line">        print(<span class="string">'You win!'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Sorry, you failed!'</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Guess: 6<br>Guess: 4<br>Guess: 9<br>You win!</p>
<h2 id="小车游戏"><a href="#小车游戏" class="headerlink" title="小车游戏"></a>小车游戏</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">command = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> command.lower() != <span class="string">"quit"</span>:</span><br><span class="line">    command = input(<span class="string">"&gt; "</span>).lower()               <span class="comment"># 替换 command = input("&gt; ")</span></span><br><span class="line">    <span class="keyword">if</span>  command == <span class="string">"start"</span>:                      <span class="comment"># 后面所有的 command.lower() 都可以用command()</span></span><br><span class="line">        print(<span class="string">'Car started... Ready to go!'</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">"stop"</span>:</span><br><span class="line">        print(<span class="string">'Car stopped.'</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">"help"</span>:</span><br><span class="line">        print(</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">                start - to start the car</span></span><br><span class="line"><span class="string">                stop  - to stop the car</span></span><br><span class="line"><span class="string">                quit  - to exit"""</span></span><br><span class="line">              )</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">"quit"</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"I don't understand that..."</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; help</span><br><span class="line"></span><br><span class="line">                start - to start the car</span><br><span class="line">                stop  - to stop the car</span><br><span class="line">                quit  - to exit</span><br><span class="line">&gt; start</span><br><span class="line">Car started... Ready to go!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<p>改进程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">command = <span class="string">""</span></span><br><span class="line">started = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = input(<span class="string">"&gt; "</span>).lower()               <span class="comment"># 替换 command = input("&gt; ")</span></span><br><span class="line">    <span class="keyword">if</span> command == <span class="string">"start"</span>:                      <span class="comment"># 后面所有的 command.lower() 都可以用command()</span></span><br><span class="line">        <span class="keyword">if</span> started:</span><br><span class="line">            print(<span class="string">"Car is already started!"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            started = <span class="literal">True</span></span><br><span class="line">            print(<span class="string">"Car started..."</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">"stop"</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> started:</span><br><span class="line">            print(<span class="string">"Car is already stopped!"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            started = <span class="literal">False</span></span><br><span class="line">            print(<span class="string">'Car stopped.'</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">"help"</span>:</span><br><span class="line">        print(<span class="string">""</span></span><br><span class="line">start - to start the car</span><br><span class="line">stop - to stop the car</span><br><span class="line">quit - to exit</span><br><span class="line">        <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">"quit"</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"I don't understand that..."</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; start</span><br><span class="line">Car</span><br><span class="line">started...</span><br><span class="line">&gt; start</span><br><span class="line">Car is already</span><br><span class="line">started!</span><br><span class="line">&gt; help</span><br><span class="line"></span><br><span class="line">start - to</span><br><span class="line">start</span><br><span class="line">the</span><br><span class="line">car</span><br><span class="line">stop - to</span><br><span class="line">stop</span><br><span class="line">the</span><br><span class="line">car</span><br><span class="line">quit - to</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">&gt; stop</span><br><span class="line">Car</span><br><span class="line">stopped.</span><br><span class="line">&gt; stop</span><br><span class="line">Car is already</span><br><span class="line">stopped!</span><br><span class="line">&gt; exit</span><br><span class="line">I</span><br><span class="line">don</span><br><span class="line">&#39;t understand that...</span><br><span class="line">&gt; quit</span><br></pre></td></tr></table></figure>

<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">'Python'</span>:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="string">'Mosh'</span> , <span class="string">'John'</span> , <span class="string">'Sarah'</span>]:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>  ,<span class="number">4</span> ]:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">5</span> , <span class="number">10</span>):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">5</span> , <span class="number">10</span> , <span class="number">2</span>):</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>P<br>y<br>t<br>h<br>o<br>n<br>Mosh<br>John<br>Sarah<br>1<br>2<br>3<br>4<br>0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>5<br>6<br>7<br>8<br>9<br>5<br>7<br>9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prices = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> price <span class="keyword">in</span> (prices):</span><br><span class="line">    total += price</span><br><span class="line">print(<span class="string">f"Total: <span class="subst">&#123;total&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Total: 60</p>
<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">f'(<span class="subst">&#123;x&#125;</span>,<span class="subst">&#123;y&#125;</span>)'</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>(0,0)<br>(0,1)<br>(0,2)<br>(1,0)<br>(1,1)<br>(1,2)<br>(2,0)<br>(2,1)<br>(2,2)<br>(3,0)<br>(3,1)<br>(3,2)</p>
<p> 【练习】打印用&amp;表示的F</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range( <span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"&amp;"</span> * x)</span><br><span class="line">        i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>&amp;&amp;&amp;&amp;&amp;<br>&amp;&amp;<br>&amp;&amp;&amp;&amp;&amp;<br>&amp;&amp;<br>&amp;&amp;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">    print(<span class="string">'&amp;'</span> * x)</span><br></pre></td></tr></table></figure>

<p>正确的嵌套做法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> x_count <span class="keyword">in</span> numbers:</span><br><span class="line">    output = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> count <span class="keyword">in</span> range(x_count):</span><br><span class="line">        output += <span class="string">'&amp;'</span></span><br><span class="line">    print(output)</span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'John'</span>, <span class="string">'Bob'</span>, <span class="string">'Mosh'</span>, <span class="string">'Sarah'</span>, <span class="string">'Mary'</span>]</span><br><span class="line">print(names[<span class="number">0</span>])</span><br><span class="line">print(names[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>John<br>Mary</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'John'</span>, <span class="string">'Bob'</span>, <span class="string">'Mosh'</span>, <span class="string">'Sarah'</span>, <span class="string">'Mary'</span>]</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">'Jon'</span></span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>[‘Jon’, ‘Bob’, ‘Mosh’, ‘Sarah’, ‘Mary’]</p>
<p>【练习】寻找最大数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">2</span> , <span class="number">9</span> , <span class="number">78</span>, <span class="number">15</span>, <span class="number">151</span>]</span><br><span class="line">max = numbers[<span class="number">0</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number &gt; max:</span><br><span class="line">        max = number</span><br><span class="line">print(max)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>151</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">]</span><br><span class="line">print(matrix[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line">print(matrix[<span class="number">0</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>2<br>20</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> row:</span><br><span class="line">        print(item)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表后加数字  append</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">numbers.append(<span class="number">20</span>)</span><br><span class="line">print(numbers)</span><br><span class="line"><span class="comment">#  列表任意位置加  insert</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">numbers.insert(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">print(numbers)</span><br><span class="line"><span class="comment">#  清除列表任意位置  remove</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">numbers.remove(<span class="number">5</span>)</span><br><span class="line">print(numbers)</span><br><span class="line"><span class="comment">#  清空  clear</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">numbers.clear()</span><br><span class="line">print(numbers)</span><br><span class="line"><span class="comment">#  清除列表最后位置  pop</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">numbers.pop()</span><br><span class="line">print(numbers)</span><br><span class="line"><span class="comment">#  索引位置  index</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">print(numbers.index(<span class="number">5</span>))</span><br><span class="line"><span class="comment">#  索引是否存在一个特定的项目  （会报错） index</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">print(numbers.index(<span class="number">500</span>))</span><br><span class="line"><span class="comment">#  查找是否有一个特定的项目（不会报错）</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">print(<span class="number">50</span> <span class="keyword">in</span> numbers)</span><br><span class="line"><span class="comment">#  显示一个特定的项目的数目  count</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">print(numbers.count(<span class="number">5</span>))</span><br><span class="line"><span class="comment">#  数组排序   升序sort   降序用   逆向reverse</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">numbers.sort()</span><br><span class="line">print(numbers)</span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">numbers.sort()</span><br><span class="line">numbers.reverse()</span><br><span class="line">print(numbers)</span><br><span class="line"><span class="comment">#  建立副本  copy</span></span><br><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">numbers2 = numbers.copy()            <span class="comment">#  建立副本  copy</span></span><br><span class="line">numbers.append(<span class="number">10</span>)</span><br><span class="line">print(numbers2)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>[5, 2, 1, 7, 4, 20]<br>[10, 5, 2, 1, 7, 4]<br>[2, 1, 7, 4]<br>[]<br>[5, 2, 1, 7]<br>0</p>
<p>【练习】清除所有的副本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>]</span><br><span class="line">uniques = []</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number <span class="keyword">not</span> <span class="keyword">in</span> uniques:</span><br><span class="line">        uniques.append(number)</span><br><span class="line">print(uniques)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>[2, 4, 6, 3, 1]</p>
<h2 id="unpacking-解压缩"><a href="#unpacking-解压缩" class="headerlink" title="unpacking  解压缩"></a>unpacking  解压缩</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coordinates = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x = coordinates[<span class="number">0</span>]</span><br><span class="line">y = coordinates[<span class="number">1</span>]</span><br><span class="line">z = coordinates[<span class="number">2</span>]</span><br><span class="line">print(coordinates)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>(1, 2, 3)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">coordinates &#x3D; (1, 2, 3)</span><br><span class="line">x, y, z &#x3D; coordinates    #  和上面效果一样</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">coordinates &#x3D; [1, 2, 3]  #</span><br><span class="line">x, y, z &#x3D; coordinates</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>1</p>
<p>2</p>
<p>【练习】”dictionary”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自行删除3个"</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">customer = &#123;</span></span><br><span class="line"><span class="string">    "name": "John Smith",</span></span><br><span class="line"><span class="string">    "age":30,</span></span><br><span class="line"><span class="string">    "is_verified":True</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">print(customer["name"])</span></span><br><span class="line"><span class="string">print(customer["birthdate"])          #  会报错</span></span><br><span class="line"><span class="string">print(customer["Name"])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">print(customer.get("birthdate"))      #  不会报错    --&gt; none</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(customer.get("birthdate", "Jan 1 1980"))        #  增加没有的信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">customer["name"] = "Jack Smith"                #  更改已有的信息</span></span><br><span class="line"><span class="string">print(customer["name"])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">customer["birthdate"] = "Jan 1 1980"</span></span><br><span class="line"><span class="string">print(customer["birthdate"])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p> [练习] 1234 -&gt; one two three four</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">phone = input(<span class="string">"Phone: "</span>)</span><br><span class="line">digits_mapping = &#123;</span><br><span class="line">    <span class="string">"1"</span>: <span class="string">"One"</span>,</span><br><span class="line">    <span class="string">"2"</span>: <span class="string">"Two"</span>,</span><br><span class="line">    <span class="string">"3"</span>: <span class="string">"Three"</span>,</span><br><span class="line">    <span class="string">"4"</span>: <span class="string">"Four"</span>,</span><br><span class="line">&#125;</span><br><span class="line">output = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> phone:</span><br><span class="line">    output += digits_mapping.get(ch, <span class="string">"!"</span>) + <span class="string">" "</span></span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Phone: 3<br>Three </p>
<h2 id="cool-I-am-sad-（-gt-I-am-sad-（表情）"><a href="#cool-I-am-sad-（-gt-I-am-sad-（表情）" class="headerlink" title="cool!!!    I am sad :（   -&gt;  I am sad （表情）"></a>cool!!!    I am sad :（   -&gt;  I am sad （表情）<img src="/uploads/loading.gif" data-original="file:///C:%5CUsers%5CADMINI~1%5CAppData%5CLocal%5CTemp%5CSGPicFaceTpBq%5C18140%5C01845FC4.png" alt="img"></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = input(<span class="string">"&gt;"</span>)</span><br><span class="line">words = message.split(<span class="string">' '</span>)      <span class="comment">#拆分为几个字符串 ['Good', 'morning', 'sunshine']</span></span><br><span class="line">emojis = &#123;</span><br><span class="line">    <span class="string">":)"</span>: <span class="string">" ٩(๑❛ᴗ❛๑)۶ "</span>,        <span class="comment"># mac 上   按 ctrl + commend + space 弹出表情框（QQ里面的那种图片）</span></span><br><span class="line">    <span class="string">":("</span> :<span class="string">" (╯︵╰) "</span>            <span class="comment"># windows  按 ctrl + shift + b(中文下）  （我的只有颜文字）</span></span><br><span class="line">&#125;</span><br><span class="line">output = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    output += emojis.get(word, word) + <span class="string">" "</span></span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>I am sad :(<br>I am sad  (╯︵╰)  （如果你的电脑是Mac，那么你可以显示和QQ图片一样的表情）</p>
<h2 id="自定义函数，函数调用-def"><a href="#自定义函数，函数调用-def" class="headerlink" title="自定义函数，函数调用 def"></a>自定义函数，函数调用 def</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hi there!'</span>)</span><br><span class="line">    print(<span class="string">'Welcome aboard'</span>)</span><br><span class="line">                         <span class="comment">#  每当我们定义函数时，函数结束要留两行</span></span><br><span class="line">                         <span class="comment">#</span></span><br><span class="line">print(<span class="string">"Start"</span>)</span><br><span class="line">greet_user()</span><br><span class="line">print(<span class="string">"Finish"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Start<br>Hi there!<br>Welcome aboard<br>Finish</p>
<h2 id="传递函数参数"><a href="#传递函数参数" class="headerlink" title="传递函数参数"></a>传递函数参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">   <span class="comment"># name = "John"</span></span><br><span class="line">    print(<span class="string">f'Hi <span class="subst">&#123;first_name&#125;</span> <span class="subst">&#123;last_name&#125;</span>!'</span>)</span><br><span class="line">    print(<span class="string">'Welcome aboard'</span>)</span><br><span class="line">                         <span class="comment">#  每当我们定义函数时，函数结束要留两行</span></span><br><span class="line">                         <span class="comment">#</span></span><br><span class="line">print(<span class="string">"Start"</span>)</span><br><span class="line">greet_user(<span class="string">"John"</span>, <span class="string">"Smith"</span>)</span><br><span class="line">print(<span class="string">"Finish"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Start<br>Hi John Smith!<br>Welcome aboard<br>Finish</p>
<p>这个代码还可以改进哟！</p>
<h2 id="位置参数和关键字参数"><a href="#位置参数和关键字参数" class="headerlink" title="位置参数和关键字参数"></a>位置参数和关键字参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">   <span class="comment"># name = "John"</span></span><br><span class="line">    print(<span class="string">f'Hi <span class="subst">&#123;first_name&#125;</span> <span class="subst">&#123;last_name&#125;</span>!'</span>)</span><br><span class="line">    print(<span class="string">'Welcome aboard'</span>)</span><br><span class="line">                         <span class="comment">#  每当我们定义函数时，函数结束要留两行</span></span><br><span class="line">                         <span class="comment">#</span></span><br><span class="line">print(<span class="string">"Start"</span>)</span><br><span class="line">greet_user(last_name=<span class="string">"Smith"</span>, first_name=<span class="string">"John"</span>)   <span class="comment">#  关键字参数  -&gt; 提高可读性</span></span><br><span class="line"><span class="comment">#  total_cost(total=50, shipping=5, discount=0.1)</span></span><br><span class="line">print(<span class="string">"Finish"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Start<br>Hi John Smith!<br>Welcome aboard<br>Finish</p>
<h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><p>同时使用位置参数和关键字参数时，  在位置参数之后使用关键字参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">   <span class="comment"># name = "John"</span></span><br><span class="line">    print(<span class="string">f'Hi <span class="subst">&#123;first_name&#125;</span> <span class="subst">&#123;last_name&#125;</span>!'</span>)</span><br><span class="line">    print(<span class="string">'Welcome aboard'</span>)</span><br><span class="line">                         <span class="comment">#  每当我们定义函数时，函数结束要留两行</span></span><br><span class="line">                         <span class="comment">#</span></span><br><span class="line">print(<span class="string">"Start"</span>)</span><br><span class="line"><span class="comment">#  greet_user(fist="John", "Smith")  报错   greet_user("John", last_name="Smith") 不报错</span></span><br><span class="line">print(<span class="string">"Finish"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Start<br>Finish</p>
<p>返回函数参数值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  number * number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = square(<span class="number">3</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">print(square(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>9</p>
<p>9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(number)</span>:</span></span><br><span class="line">    print(number * number)</span><br><span class="line"><span class="comment">#   return None                  默认返回 None</span></span><br><span class="line"></span><br><span class="line">print(square(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>9<br>None</p>
<h2 id="用except解决出现的-各种报错"><a href="#用except解决出现的-各种报错" class="headerlink" title="用except解决出现的 各种报错"></a>用except解决出现的 各种报错</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age = int(input(<span class="string">'Age: '</span>))</span><br><span class="line">    print(age)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">'Invalid value'</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Age: lkj<br>Invalid value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age = int(input(<span class="string">'Age: '</span>))</span><br><span class="line">    income = <span class="number">20000</span></span><br><span class="line">    risk = income / age</span><br><span class="line">    print(age)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">'Age cannot be 0.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">'Invalid value'</span>)         <span class="comment">#   ZeroDivisionError: division by zero</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>Age: 6.35<br>Invalid value</p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>创建自己需要的对象</p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>带你白嫖--chrome+油猴</title>
    <url>/2020/05/02/%E5%B8%A6%E4%BD%A0%E7%99%BD%E5%AB%96-chrome-%E6%B2%B9%E7%8C%B4/</url>
    <content><![CDATA[<p>很多小伙伴都装上了chrome浏览器，或者以chrome浏览器为内核的各类浏览器，除了好用、方便、合理之外，想必大家也深受它的另外一个功能所吸引—安装插件。</p>
<p>这一功能，极大的提高了用户体验，也让浏览器本身不必那么冗杂，运行速度自然也提升上去了，另一方面，也满足了每个人的定制化需求，两全其美。</p>
<p>今天，来说说其中一个经典且强大的插件–Tampermonkey。油猴，作为chrome插件中的神器，很多人或多或少都听说过，可是笔者也发现，有很多朋友，仅仅是因为它的出名或者排行靠前，就草草的安装，便置之不理了。那么今天，来带大家使用这一神器，白嫖各类功能。</p>
<p><img src="/uploads/loading.gif" data-original="tampermonkey.jpg" alt></p>
<a id="more"></a>

<h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2><p>Tampermonkey在国内称为油猴，它是一个可以安装脚本的浏览器插件，用户可根据自己的喜好安装或者编写脚本。不过经过全球各地无数开发者数年的积累现在其官网已经有一大把的优秀的现成脚本，完全可以满足普通用户的日常应用。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先，你得知道如何安装插件，进入chome的往上应用商店<a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="noopener">传送门</a>(如果不使用特殊的方法，不能打开网址是正常的，毕竟使用的是国内的网络，由于某些特殊原因就只能提醒到这里了，你可以再根据这个问题，去搜搜解决方法，相信你了解之后，也会知道不能直接说明的原因),在搜索应用处tampermonkey，安装tampermonkey插件</p>
<p><img src="/uploads/loading.gif" data-original="%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6.png" alt></p>
<p>点击添加到chrome</p>
<p>工具栏显示tampermonkey的图标，即表示安装完成。</p>
<p><img src="/uploads/loading.gif" data-original="%E5%B7%A5%E5%85%B7%E6%A0%8F%E6%98%BE%E7%A4%BA.png" alt></p>
<h2 id="使用tampermonkey装脚本"><a href="#使用tampermonkey装脚本" class="headerlink" title="使用tampermonkey装脚本"></a>使用tampermonkey装脚本</h2><p>如果你是大神级的人物，你可以使用tampermonkey建立自己的脚本。或者，你可以使用各位大佬已经做好的脚本，并且这些脚本都已经非常实用。脚本网站<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">传送门</a>，进入脚本网站。</p>
<p><img src="/uploads/loading.gif" data-original="greasyfork.png" alt></p>
<p>接下来，在网站的标题栏处，可以看到<strong><em>脚本列表</em></strong> ，点击<strong><em>脚本列表</em></strong> 进入脚本列表，就可以根据你的喜好，选择你所需要的功能，相信你做到这一步，你会非常惊喜，因为，已经打开了一个新世界的大门！</p>
<p>先给你看看其中的脚本简介，就问你心动不心动？</p>
<p><img src="/uploads/loading.gif" data-original="%E8%84%9A%E6%9C%AC%E5%88%97%E8%A1%A8.png" alt></p>
<p>当你选择好你的脚本之后，点击脚本标题进入界面如下：</p>
<p><img src="/uploads/loading.gif" data-original="%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85.png" alt></p>
<p>再点击安装</p>
<p><img src="/uploads/loading.gif" data-original="%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%852.png" alt></p>
<p>浏览器界面没有任何显示，但是脚本已经安装成功了，对应脚本的使用方法，参见你所选择脚本的简介。</p>
<p>（ps:赶紧去试试那啥全网VIP…的脚本吧！）<img src="/uploads/loading.gif" data-original="%E6%96%9C%E7%9C%BC%E7%AC%91.png" alt></p>
<h2 id="查看已经安装好的脚本"><a href="#查看已经安装好的脚本" class="headerlink" title="查看已经安装好的脚本"></a>查看已经安装好的脚本</h2><p>点击工具栏中的油猴图标，选项框中选择<strong><em>管理面板</em></strong> 即可查看你所安装好的所有脚本。</p>
<p><img src="/uploads/loading.gif" data-original="%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF.png" alt></p>
<h2 id="手机端也想拥有？"><a href="#手机端也想拥有？" class="headerlink" title="手机端也想拥有？"></a>手机端也想拥有？</h2><p>目前大多数手机浏览器不能安装脚本，但是，有一个非常推荐，yandex浏览器，如果你想要yandex的安装包，可以给我留言哦！</p>
]]></content>
      <categories>
        <category>白嫖</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>tampermonkey</tag>
      </tags>
  </entry>
  <entry>
    <title>PLC那些事</title>
    <url>/2020/04/30/PLC%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<p>​    来讲讲plc那些事吧！谈谈我的所学。</p>
<p>​    本文讲述了一些关于plc的基本指令，比较适合入门的同学，快来看看吧！</p>
<a id="more"></a>

<h1 id="什么是PLC"><a href="#什么是PLC" class="headerlink" title="什么是PLC?"></a>什么是PLC?</h1><p>Programmable Logic Controller可编程控制器</p>
<p>PLC 是一种专门用于工业控制的计算机；</p>
<p>PLC设计理念是将计算机系统的功能完备、灵活、通用与继电器控制系统的简单易懂、操作方便、价格便宜等优点结合起来，制造出的一种新型的工业控制设备。</p>
<p>由于PLC属于程序控制方式，其控制功能是通过存放在存储器内的程序来实现的，若要对控制功能加以修改，只需改变软件指令即可，不需过多地改变硬件，从而实现了硬件的软件化管理。</p>
<h2 id="plc的优缺点"><a href="#plc的优缺点" class="headerlink" title="plc的优缺点"></a>plc的优缺点</h2><p>PLC与接触器控制系统相比之优点在于：<br>1、使用和维护方便 可靠性高   使用寿命为半永久性;<br>2、运行稳定 抗干扰性强  对环境要求低;<br>3、设计施工周期短;<br>4、编程软件和语言简单易学 编程方法针对普通工人         便于普及;<br>5、控制功能强 适应范围广与其它设备兼容性好 .    </p>
<h2 id="plc的功能"><a href="#plc的功能" class="headerlink" title="plc的功能"></a>plc的功能</h2><p>（1）条件控制 :可代替继电器进行开关控制<br>（2）定时控制 :精确定时器其定时值可任意修改<br>（3）计数功能 :各种计数方法的计数器上百个<br>（4）步近控制:可以把复杂控制简单化<br>（5）闭环过程控制 ;<br>（6）数据处理:加减乘除、开方、译码、字操作等<br>（7）通信和联网:便于实现分散式测控系统<br>（8）对控制系统的监控 .</p>
<h2 id="plc的构成"><a href="#plc的构成" class="headerlink" title="plc的构成"></a>plc的构成</h2><p><img src="/uploads/loading.gif" data-original="PLC%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.png" alt></p>
<p>其中，各个部分有哪些作用呢？</p>
<h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>(1) 将各种输入信号取入存储器。<br>(2) 编译、执行指令。<br>(3) 把结果送到输出端。<br>(4) 响应各种外部设备的请求。</p>
<h4 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h4><p>RAM：存储各种暂存数据、中间结果、用户程序。<br>ROM：存放系统程序和固定不变的用户程序。</p>
<h4 id="开关量输入、输出接口（I-O口）"><a href="#开关量输入、输出接口（I-O口）" class="headerlink" title="开关量输入、输出接口（I/O口）"></a>开关量输入、输出接口（I/O口）</h4><p> 接口采用光电隔离和RC滤波，实现了PLC的内部电路与外部电路的电气隔离，并减小了电磁干扰。同时满足工业现场各类信号的匹配要求。</p>
<h5 id="输入接口"><a href="#输入接口" class="headerlink" title="输入接口"></a>输入接口</h5><p>  用来接收、采集外部输入信号，并将转换成CPU可接受的数字信息。</p>
<h5 id="输入接口分类"><a href="#输入接口分类" class="headerlink" title="输入接口分类"></a>输入接口分类</h5><p>输入接口电路可采集的信号有三大类：<br>    无源开关：     如按钮、接触器触点、行程开关等<br>    有源开关：     如接近开关、晶体管开关电路等<br>    模拟量信号： 由电位器、测速发电机和各类变送器产生</p>
<h5 id="输出接口"><a href="#输出接口" class="headerlink" title="输出接口"></a>输出接口</h5><p> 输出接口电路是PLC与外部负载之间的桥梁，将PLC向外输出的信号转换成可以驱动外部执行电路的控制信号，以便控制如接触器线圈等电器的通断电</p>
<h5 id="输出接口分类"><a href="#输出接口分类" class="headerlink" title="输出接口分类"></a>输出接口分类</h5><p>继电器输出（交直流接口）：响应速度慢、带负载能力大 、每口输出最大电流为2安、可接交流或直流负载</p>
<p>晶闸管输出（交流接口）：响应速度及带载能力 适中、每口输出最大电流为几十毫安（略大于晶闸管的）、可接交流负载</p>
<p>晶体管输出（直流接口）： 响应速度快、带负载能力小 、每口输出最大电流为几十毫安、可接直流负载</p>
<h2 id="plc的规模分类"><a href="#plc的规模分类" class="headerlink" title="plc的规模分类"></a>plc的规模分类</h2><p>可编程序控制器可以分为大型机、中型机和小型机。<br> 小型机 :   小型机的控制点一般在256点之内,适合于单机控制或小型系统的控制。</p>
<p>中型机:     中型机的控制点一般不大于2048点,可用于对设备进行直接控制，还可以对多个下一级的可编程序控制器进行监控，它适合中型或大型控制系统的控制。</p>
<p>大型机:   大型机的控制点一般大于2048点,不仅能完成较复杂的算术运算还能进行复杂的矩阵运算。它不仅可用于对设备进行直接控制，还可以对多个下一级的可编程序控制器进行监控。</p>
<p><img src="/uploads/loading.gif" data-original="PLC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%8E%A5%E8%A7%A6%E5%99%A8%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AF%94%E8%BE%83.png" alt></p>
<h1 id="plc的基本知识"><a href="#plc的基本知识" class="headerlink" title="plc的基本知识"></a>plc的基本知识</h1><h2 id="plc的控制"><a href="#plc的控制" class="headerlink" title="plc的控制"></a>plc的控制</h2><p>猴急了吧？接下来，讲plc的控制。</p>
<p>首先，你得明白在PLC控制系统中逻辑控制部分由“软元件”组成，常用的软元件有：输入继电器X、输出继电器Y、辅助继电器M、定时器T、计数器C等。</p>
<p>其次，你得知道，plc的编程语言有三种：梯形图、语句表（指令表）和流程图（SFC）</p>
<p>最后，你还得知道每个符号，每个指令的含义</p>
<h4 id="plc的编程语言"><a href="#plc的编程语言" class="headerlink" title="plc的编程语言"></a>plc的编程语言</h4><p>1）梯形图   用图形符号在图中的相互关系来表达控制逻辑的编程语言。特点：形象、直观、与继电器控制线路相似，是编程的首选方法。</p>
<p><img src="/uploads/loading.gif" data-original="%E6%A2%AF%E5%BD%A2%E5%9B%BE.png" alt></p>
<h1 id="开始学习plc编程吧！"><a href="#开始学习plc编程吧！" class="headerlink" title="开始学习plc编程吧！"></a>开始学习plc编程吧！</h1><h4 id="接线端符号"><a href="#接线端符号" class="headerlink" title="接线端符号"></a>接线端符号</h4><p>电源输入端    L   N   PE   给PLC提供电源</p>
<p>公共输入端    COM</p>
<p>信号输入端 X0 ~ X77       输入端编号采用八进制,每一 个输入端对应一个输入电路</p>
<p>信号输出端    Y0 ~ Y77   输出端编号采用八进制,每一   个输出端对应一个输出电路。</p>
<p>公共输出端    COM</p>
<h4 id="梯形图"><a href="#梯形图" class="headerlink" title="梯形图"></a>梯形图</h4><p>国有国法，家有家规，梯形图当然也有梯形图的规则啦！</p>
<p>（1）左母线只能接各类触点、右母线只能接各类线圈（不含输入继电器线圈）</p>
<p><img src="/uploads/loading.gif" data-original="%E6%A2%AF%E5%BD%A2%E5%9B%BE%E8%A7%84%E5%88%991.png" alt></p>
<p>（2）所有软元件的编号应在列表之内，同一编号的线圈一般只能出现一次；触点使用次数无限，线圈不能串联。</p>
<p><img src="/uploads/loading.gif" data-original="%E6%A2%AF%E5%BD%A2%E5%9B%BE%E8%A7%84%E5%88%992.png" alt></p>
<p>（3) 在梯形图中，不能直接驱动负载，只能用输出继电器Y驱动负载。</p>
<p><img src="/uploads/loading.gif" data-original="%E6%A2%AF%E5%BD%A2%E5%9B%BE%E8%A7%84%E5%88%993.png" alt></p>
<p>（4）梯形图应按控制顺序从左到右、从上到下依次<br>         绘出。最后一逻辑行为END</p>
<h4 id="语句表"><a href="#语句表" class="headerlink" title="语句表"></a>语句表</h4><p> 由序号、助记符(指令)和操作数   组成的汇编语言。 它与梯形图中每个元件及其状态相互对应。</p>
<p>语句表的格式由三部分组成：序号 指令   操作数(操作元件）</p>
<p>​                                                       1     LD         X0<br>                                                       2     OUT      Y0<br>                                                       3     LD         M0<br>​                                                       4       OUT      T0   K50<br>​                                                       5      END    </p>
<h4 id="例子–异步电动机点动控制线路"><a href="#例子–异步电动机点动控制线路" class="headerlink" title="例子–异步电动机点动控制线路"></a>例子–异步电动机点动控制线路</h4><p><img src="/uploads/loading.gif" data-original="%E5%BC%82%E6%AD%A5%E7%94%B5%E5%8A%A8%E6%9C%BA%E7%82%B9%E5%8A%A8%E6%8E%A7%E5%88%B6%E7%BA%BF%E8%B7%AF.png" alt></p>
<p>程序</p>
<p><img src="/uploads/loading.gif" data-original="%E5%BC%82%E6%AD%A5%E7%94%B5%E5%8A%A8%E6%9C%BA%E7%82%B9%E5%8A%A8%E6%8E%A7%E5%88%B6%E7%BA%BF%E8%B7%AF2.png" alt></p>
<p>原理分析</p>
<p><img src="/uploads/loading.gif" data-original="%E5%BC%82%E6%AD%A5%E7%94%B5%E5%8A%A8%E6%9C%BA%E7%82%B9%E5%8A%A8%E6%8E%A7%E5%88%B6%E7%BA%BF%E8%B7%AF3.png" alt></p>
<h4 id="编程元件（软元件）"><a href="#编程元件（软元件）" class="headerlink" title="编程元件（软元件）"></a>编程元件（软元件）</h4><h5 id="（1）输入继电器-用X表示"><a href="#（1）输入继电器-用X表示" class="headerlink" title="（1）输入继电器   用X表示"></a>（1）输入继电器   用X表示</h5><p>与外部输入端相连，是接受外部输入信号的继电器，即只能由外部信号驱动，而不能用程序驱动，其数量与外部输入端数量一一对应。</p>
<p>符号：<img src="/uploads/loading.gif" data-original="%E8%BE%93%E5%85%A5%E7%BB%A7%E7%94%B5%E5%99%A8%E7%AC%A6%E5%8F%B7.png" alt></p>
<h5 id="（2）输出继电器-用Y表示"><a href="#（2）输出继电器-用Y表示" class="headerlink" title="（2）输出继电器    用Y表示"></a>（2）输出继电器    用Y表示</h5><p> 是将程序运行结果传送给外部负载的继电器。只能由程序驱动。其数量与外部输出端数量一一对应。</p>
<p>符号：<img src="/uploads/loading.gif" data-original="%E8%BE%93%E5%87%BA%E7%BB%A7%E7%94%B5%E5%99%A8%E7%AC%A6%E5%8F%B7.png" alt></p>
<p>注意：</p>
<p>​    1)  输入和输出继电器其常开和常闭触点使用次数无限</p>
<p>​    2)  输入和输出继电器的编号均采用八进制</p>
<h5 id="（3）-辅助继电器-用M表示"><a href="#（3）-辅助继电器-用M表示" class="headerlink" title="（3）  辅助继电器   用M表示"></a>（3）  辅助继电器   用M表示</h5><p>常开、常闭触点及线圈的图形符号与输出继电器一样，地址（编号）按十进制编号，但不能驱动外部负载。</p>
<p>辅助继电器分类：</p>
<p><img src="/uploads/loading.gif" data-original="%E8%BE%85%E5%8A%A9%E7%BB%A7%E7%94%B5%E5%99%A8%E5%88%86%E7%B1%BB.png" alt></p>
<p>通用辅助继电器的作用相当于中间继电器<br>特殊辅助继电器每一个都有各自的作用</p>
<h5 id="（4）其它编程软元件"><a href="#（4）其它编程软元件" class="headerlink" title="（4）其它编程软元件"></a>（4）其它编程软元件</h5><p>​     定时器(T)<br>​     计数器(C)<br>​     状态继电器(S)<br>​     数据存储器（D）<br>​     变址寄存器（Z、V）等</p>
<h1 id="P-L-C应用基础"><a href="#P-L-C应用基础" class="headerlink" title="P L C应用基础"></a>P L C应用基础</h1><p>各个厂家生产的 PLC 产品的指令系统大同小异。编程方法也类似。本指令以日本三菱FX系列的PLC产品为例。</p>
<p>指令的分类：基本指令（最常用的20余条）、功能指令（200多条）</p>
<h4 id="1、连接指令-连接左母线或电路块时输入的第一个指令"><a href="#1、连接指令-连接左母线或电路块时输入的第一个指令" class="headerlink" title="1、连接指令 连接左母线或电路块时输入的第一个指令"></a>1、连接指令 连接左母线或电路块时输入的第一个指令</h4><p>1）LD   （取指令）<br>            功能  ：使常开触点与左母线或电路块连接</p>
<p>2）LDI   （取反指令）<br>           功能  ：使常闭触点与左母线或电路块连接</p>
<p>LD  和  LDI 可 操 作 的 元 件 有   X  、 Y   、M  、 S 、 T 、 C</p>
<p><img src="/uploads/loading.gif" data-original="LD%E5%92%8CLDI.png" alt></p>
<h4 id="2、输出（驱动）指令-OUT"><a href="#2、输出（驱动）指令-OUT" class="headerlink" title="2、输出（驱动）指令   OUT"></a>2、输出（驱动）指令   OUT</h4><p>功能：  驱动线圈通电</p>
<p>OUT可操作的元件有   Y、  M、  S、 T 、 C</p>
<p><img src="/uploads/loading.gif" data-original="OUT.png" alt></p>
<p>（1）OUT不能驱动输入继电器， 因为输入继电器的状态是由输入信号决定的。</p>
<p>（2）OUT可并联连续使用，视为并行输出，次数不限。</p>
<p>（3）定时器T和计数器C使用OUT指令后，还需赋定时值和计数值</p>
<p><img src="/uploads/loading.gif" data-original="OUT2.png" alt></p>
<h4 id="3、串联-与-指令"><a href="#3、串联-与-指令" class="headerlink" title="3、串联 (与) 指令"></a>3、串联 (与) 指令</h4><p>当继电器的触点与其它继电器触点串联时使用该指令</p>
<p>1）AND      功能：  常开触点与其它触点串联</p>
<p>2）ANI      功能：  常闭触点与其它触点串联</p>
<p>AND 和 ANI  指令可操作的元件有 X、Y、M、S、T、C</p>
<p><img src="/uploads/loading.gif" data-original="AND%E5%92%8CANI.png" alt></p>
<p>（1）可连续使用，使用次数不限</p>
<p>（2）在OUT指令之后,再通过触点对其它线圈,使用OUT指令,称之为纵接输出</p>
<p><img src="/uploads/loading.gif" data-original="%E7%BA%B5%E6%8E%A5%E8%BE%93%E5%87%BA.png" alt></p>
<h4 id="4、并联（或）指令"><a href="#4、并联（或）指令" class="headerlink" title="4、并联（或）指令"></a>4、并联（或）指令</h4><p>当一个触点与其它触点并联时应用该指令</p>
<p>1） OR    功能：  常开触点与其它触点并联</p>
<p>2） ORI   功能： 常闭触点与其它触点并联</p>
<p>OR 和 ORI  指令可操作的元件有   X、Y、M、S、T、C</p>
<p><img src="/uploads/loading.gif" data-original="OR%E5%92%8CORI.png" alt></p>
<p>单个触点并联次数不限，指令可反复使用</p>
<p><img src="/uploads/loading.gif" data-original="OR%E5%92%8CORI2.png" alt></p>
<p>指令书写的前后顺序，与求等效电阻方法类似，一般是先串联，后并联。</p>
<h4 id="5、结束指令：END-没有操作数"><a href="#5、结束指令：END-没有操作数" class="headerlink" title="5、结束指令：END      没有操作数"></a>5、结束指令：END      没有操作数</h4><p><img src="/uploads/loading.gif" data-original="END.png" alt></p>
<p>指令符号表：</p>
<p><img src="/uploads/loading.gif" data-original="%E6%8C%87%E4%BB%A4%E7%AC%A6%E5%8F%B7%E8%A1%A8.png" alt></p>
<p>例子：</p>
<p><img src="/uploads/loading.gif" data-original="END%E4%BE%8B%E5%AD%90.png" alt></p>
<h4 id="6、置位指令-SET和复位指令-RST"><a href="#6、置位指令-SET和复位指令-RST" class="headerlink" title="6、置位指令  SET和复位指令  RST"></a>6、置位指令  SET和复位指令  RST</h4><p>置位指令  SET   使被操作的线圈自锁（自保）<br>复位指令  RST   使被操作的线圈或元件解锁（清零）</p>
<p><img src="/uploads/loading.gif" data-original="SET%E5%92%8CRST.png" alt></p>
<p>置位指令  SET可操作的元件有   Y、M、S、<br>复位指令  RST可操作的元件有   Y、M、S、T、C、D、V、Z</p>
<h4 id="7-电路块指令"><a href="#7-电路块指令" class="headerlink" title="7.电路块指令"></a>7.电路块指令</h4><h5 id="（1）电路块串联"><a href="#（1）电路块串联" class="headerlink" title="（1）电路块串联"></a>（1）电路块串联</h5><p><img src="/uploads/loading.gif" data-original="%E7%94%B5%E8%B7%AF%E5%9D%97%E4%B8%B2%E8%81%94.png" alt></p>
<p>例子：</p>
<p><img src="/uploads/loading.gif" data-original="%E8%87%AA%E9%94%81%E6%8E%A7%E5%88%B6%E7%94%B5%E8%B7%AF.png" alt></p>
<h5 id="（2）电路块并联："><a href="#（2）电路块并联：" class="headerlink" title="（2）电路块并联："></a>（2）电路块并联：</h5><p><img src="/uploads/loading.gif" data-original="%E7%94%B5%E8%B7%AF%E5%9D%97%E5%B9%B6%E8%81%94.png" alt></p>
<h4 id="8、栈存储器指令-解决多路输出问题"><a href="#8、栈存储器指令-解决多路输出问题" class="headerlink" title="8、栈存储器指令      解决多路输出问题"></a>8、栈存储器指令      解决多路输出问题</h4><h4 id="9、主控和主控返回指令-解决多路输出问题"><a href="#9、主控和主控返回指令-解决多路输出问题" class="headerlink" title="9、主控和主控返回指令      解决多路输出问题"></a>9、主控和主控返回指令      解决多路输出问题</h4><p>（1）主控指令   MC<br>      功能：产生一临时的左母线，形成一个主控电路块</p>
<p>（2）主控返回指令   MCR<br>      功能：消除临时产生的左母线，结束主控电路块</p>
<p>MC    可操作元件  M、Y<br>MCR   无操作数  </p>
<p><img src="/uploads/loading.gif" data-original="%E4%B8%BB%E6%8E%A7%E5%92%8C%E4%B8%BB%E6%8E%A7%E8%BF%94%E5%9B%9E%E6%8C%87%E4%BB%A4.png" alt></p>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>PLC</category>
      </categories>
      <tags>
        <tag>PLC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo next7 博客中所有图标不能正常显示（显示小方块）</title>
    <url>/2020/04/05/Hexo-next7-%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%89%80%E6%9C%89%E5%9B%BE%E6%A0%87%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%EF%BC%88%E6%98%BE%E7%A4%BA%E5%B0%8F%E6%96%B9%E5%9D%97%EF%BC%89/</url>
    <content><![CDATA[<p>​        刚升级完next7发现以前的所有的图标不能正常显示，所有的，全部显示的是一个小方块</p>
<a id="more"></a>

<p><img src="/uploads/loading.gif" data-original="1.png" alt></p>
<p>​        这肯定是加载了图标，可是为什么显示不出来呢？首先，图标库升级了，Font Awesome 4.7.0，是否我的配置没有正确呢？查了很多资料，发现了也有我这同样的问题（所有的图标都是小方块），很多都没有讲述清楚，如何更改，多次失败，最终找到了解决的办法，如下：</p>
<h3 id="检查文件"><a href="#检查文件" class="headerlink" title="检查文件"></a>检查文件</h3><p>首先你要检查你的文件(我的是在\blogs\themes\next7\source\lib)，如果没有有最新的Font Awesome 4.7.0，在官网点击下载，或者，直接到github库中： <a href="https://github.com/hexojs/hexo-fontawesome" target="_blank" rel="noopener">传送门</a>.</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在\blogs\themes\next7\layout_partials\head\head.swig中添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;%- url_for('/fa-brands/css/fa-brands.min.css') %&gt;"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;%- url_for('/fa-regular/css/fa-regular.min.css') %&gt;"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;%- url_for('/fa-solid/css/fa-solid.min.css') %&gt;"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;%- url_for('/fontawesome/css/fontawesome.min.css') %&gt;"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;%- url_for('/fontawesome-all/css/fontawesome-all.css') %&gt;"</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">"https://use.fontawesome.com/releases/v5.0.4/css/all.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br></pre></td></tr></table></figure>

<p>然后，重新hexo clean ，hexo g ，hexo  d就可以了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>next7</tag>
        <tag>Hexo</tag>
        <tag>博客美化</tag>
      </tags>
  </entry>
  <entry>
    <title>深切哀悼在抗击新型肺炎疫情中牺牲的烈士和同胞</title>
    <url>/2020/04/04/%E6%B7%B1%E5%88%87%E5%93%80%E6%82%BC%E5%9C%A8%E6%8A%97%E5%87%BB%E6%96%B0%E5%9E%8B%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85%E4%B8%AD%E7%89%BA%E7%89%B2%E7%9A%84%E7%83%88%E5%A3%AB%E5%92%8C%E5%90%8C%E8%83%9E/</url>
    <content><![CDATA[<p><img src="/uploads/loading.gif" data-original="%E6%B7%B1%E5%88%87%E5%93%80%E6%82%BC.jpg" alt></p>
<p>​        家是最小国，国是千万家。家与国是我们生命的源起，亦是心灵依托的归宿，一脉传承，浑然合一。届时正值新型冠状病毒泛滥之时，虽已有近6月之久，疫情依旧难以压制，忆武汉封城之时，无数平民争先恐后，逃离重灾区武汉，直至封城。接着口罩成了年货，消毒水成为畅销，2020本该热闹的春节，霎时变得冷清，繁华的都市一片死寂，静的可怕。然而，在这国家危难之时，却有无数“战士”，冲向“前线”。他们，是天使、勇士，是至亲、至爱，他们，是最美的逆行者！今日，全国哀悼，此刻，一起缅怀，为逝去的同胞，为牺牲的战“疫”勇士，永远铭记！<a id="more"></a></p>
<p>​        “哪有什么岁月静好，不过是有人替你负重前行”</p>
<p><img src="/uploads/loading.gif" data-original="%E6%88%98%E7%96%AB%E5%8B%87%E5%A3%AB.jpg" alt></p>
<p><img src="/uploads/loading.gif" data-original="%E8%AD%A6%E5%AF%9F.jpg" alt></p>
<p><img src="/uploads/loading.gif" data-original="%E6%88%98%E5%A3%AB.jpg" alt></p>
<p><img src="/uploads/loading.gif" data-original="download.jpg" alt></p>
<p><img src="/uploads/loading.gif" data-original="%E5%85%A8%E5%9B%BD%E5%93%80%E6%82%BC%E6%97%A5%E9%99%8D%E5%8D%8A%E6%97%97.jpg" alt></p>
<p><img src="/uploads/loading.gif" data-original="%E7%BC%85%E6%80%80.jpg" alt></p>
<p>​        愿逝者安息，愿生者奋发，愿祖国昌盛，致敬英雄！</p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>致敬英雄</tag>
        <tag>新型冠状病毒（2019）</tag>
        <tag>全国哀悼日</tag>
        <tag>COVID-19</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO 折腾笔记</title>
    <url>/2020/04/03/HEXO-%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="添加分类及标签"><a href="#添加分类及标签" class="headerlink" title="添加分类及标签"></a>添加分类及标签</h2><p>关于标签和分类的使用方法参见</p>
<a id="more"></a>

<p>[Hexo使用攻略-添加分类及标签]:  <a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener">传送门</a>.</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next7</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 美化</title>
    <url>/2020/04/02/Hexo-%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>本文讲述了关于hexo next 7的相关主题美化的配置。</p>
<h2 id="文章末尾显示-“本文结束”标记"><a href="#文章末尾显示-“本文结束”标记" class="headerlink" title="文章末尾显示 “本文结束”标记"></a>文章末尾显示 “本文结束”标记</h2><p>为你的文章结尾添加”本文结束“标记。</p>
<a id="more"></a>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：（文字可更改）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">       &lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;-------------本文结束&lt;i class=<span class="string">"fa fa-paw"</span>&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer之前添加如下画红色部分代码（post-footer之前两个DIV）（我使用的是next7，添加在  之后的）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">'passage-end-tag.swig'</span> %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="主题文件调用"><a href="#主题文件调用" class="headerlink" title="主题文件调用"></a>主题文件调用</h3><p>然后打开主题配置文件（_config.yml),在末尾添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="文章添加字数统计、阅读时间"><a href="#文章添加字数统计、阅读时间" class="headerlink" title="文章添加字数统计、阅读时间"></a>文章添加字数统计、阅读时间</h2><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p>先给出<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">官方配置说明</a></p>
<p>选中你的站点文件，右键Get Bash Here进入命令框输入下面的代码导入文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<h3 id="主题文件调用-1"><a href="#主题文件调用-1" class="headerlink" title="主题文件调用"></a>主题文件调用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: <span class="literal">true</span>                <span class="comment"># 文章字数统计</span></span><br><span class="line">  time: <span class="literal">true</span>                   <span class="comment"># 文章阅读时长</span></span><br><span class="line">  total_symbols: <span class="literal">true</span>          <span class="comment"># 站点总字数统计</span></span><br><span class="line">  total_time: <span class="literal">true</span>             <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  exclude_codeblock: <span class="literal">false</span>     <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure>

<h2 id="文章设置阅读全文标记"><a href="#文章设置阅读全文标记" class="headerlink" title="文章设置阅读全文标记"></a>文章设置阅读全文标记</h2><p>先给出<a href="https://github.com/chekun/hexo-excerpt" target="_blank" rel="noopener">官方配置说明</a></p>
<p>选中你的站点文件，右键Get Bash Here进入命令框输入下面的代码导入文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件_config.yml添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">depth: 10</span><br><span class="line">excerpt_excludes: []</span><br><span class="line">more_excludes: []</span><br><span class="line">hideWholePostExcerpts: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>以上方法不行的话 在博客配置文件 _config.yml里 excerpt_description 改为true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line">excerpt_description: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>搞定！不过我的博客还是显示太多，不像最初hexo5的时候直接可以设定显示字数多少，很舒服，我再看一下。</p>
<h2 id="站点信息背景块更改颜色"><a href="#站点信息背景块更改颜色" class="headerlink" title="站点信息背景块更改颜色"></a>站点信息背景块更改颜色</h2><p>路径Path: themes/next7/source/css/_schemes/Pisces/_header.sty<br>颜色可根据自己喜好更改<br>将下面的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.site-meta &#123;</span><br><span class="line">  padding: 20px 0; <span class="comment">#);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">更改：</span><br><span class="line">​``` bash</span><br><span class="line">.site-meta &#123;</span><br><span class="line">  background-image: linear-gradient(to right, <span class="comment">#db7093, #20B2AA, #4169E1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="站点信息背景块更改颜色-1"><a href="#站点信息背景块更改颜色-1" class="headerlink" title="站点信息背景块更改颜色"></a>站点信息背景块更改颜色</h2><p>路径Path: themes/next/layout/_partials/sidebar/site-overview.swig</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next 7</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 更改背景</title>
    <url>/2020/04/01/Hexo-%E6%9B%B4%E6%94%B9%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<p>博客不好看？没有背景装点，当然会有些许乏味，赶紧来添加点背景图片吧，让你的博客高大上！<a id="more"></a></p>
<h3 id="修改背景样式"><a href="#修改背景样式" class="headerlink" title="修改背景样式"></a>修改背景样式</h3><p>修改themes\next\source\css\ _custom\custom.styl文件，这个是Next故意留给用户自己个性化定制一些样式的文件，添加以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background:url(https://source.unsplash.com/random/1600x900);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">    background-size:cover;</span><br><span class="line">&#125;body &#123;</span><br><span class="line">    background:url(https://source.unsplash.com/random/1600x900);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">    background-size:cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>url可更换为自己喜欢的图片的地址。<br>repeat：是否重复出现<br>attachment：定义背景图片随滚动轴的移动方式<br>position：设置背景图像的起始位置。<br>background-size:cover为可能有助于大分辨率下背景图的显示</p>
<p>##修改不透明度（可加可不加，看实际效果）<br>因为next主题的背景是纯透明的，这样子就造成背景图片的影响看不见文字，这对于博客来说肯定不行。</p>
<p>调整背景的不透明度可以更加美观，参数opacity:建议调整0.8至0.95之间。<br>修改themes\next\source\css\ _custom\custom.styl文件。在后面添加如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.main-inner &#123; </span><br><span class="line">    margin-top: 60px;</span><br><span class="line">    padding: 60px 60px 60px 60px;</span><br><span class="line">    background: <span class="comment">#fff;</span></span><br><span class="line">    opacity: 0.9;</span><br><span class="line">    min-height: 500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="无custom-styl的情况"><a href="#无custom-styl的情况" class="headerlink" title="无custom.styl的情况"></a>无custom.styl的情况</h3><p>在站点目录source下新建 _data/styles.style</p>
<p>然后将_config.styl中<code>style:</code>前的 # 去掉即可。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next7</tag>
        <tag>博客美化</tag>
      </tags>
  </entry>
  <entry>
    <title>升级博客，我太难了</title>
    <url>/2020/03/28/%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<p>为自己记录一下升级，以免出错。才搭建好自己的博客，选好自己较为喜欢的主题，可越发觉得还有一些单调，发现自己所使用的next主题早已有更好看的更改,不改吧，心中还是痒痒的；但那是否，前面所做的所有配置都得一一更改，想来，更改量巨大，且早已忘记之前如何配置，但却想来，还是决心改掉，毕竟现在才搭建不久，还有很多配置还没有更改，若是改掉所有配置之后再做升级，岂不是工作量更大，还是动手吧！</p>
<a id="more"></a>

<h2 id="咋升级"><a href="#咋升级" class="headerlink" title="咋升级"></a>咋升级</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>先备份一下吧！</p>
<h2 id="升级hexo"><a href="#升级hexo" class="headerlink" title="升级hexo"></a>升级hexo</h2><p>查看博客目录中的package.json文件，记录hexo和一些依赖版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">    <span class="string">"clean"</span>: <span class="string">"hexo clean"</span>,</span><br><span class="line">    <span class="string">"deploy"</span>: <span class="string">"hexo deploy"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"hexo server"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hexo"</span>: &#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"4.2.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"hexo"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="string">"hexo-asset-image"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"hexo-deployer-git"</span>: <span class="string">"^2.1.0"</span>,</span><br><span class="line">    <span class="string">"hexo-generator-archive"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"hexo-generator-category"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"hexo-generator-feed"</span>: <span class="string">"^2.2.0"</span>,</span><br><span class="line">    <span class="string">"hexo-generator-index"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"hexo-generator-searchdb"</span>: <span class="string">"^1.2.0"</span>,</span><br><span class="line">    <span class="string">"hexo-generator-tag"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"hexo-helper-live2d"</span>: <span class="string">"^3.1.1"</span>,</span><br><span class="line">    <span class="string">"hexo-lazyload-image"</span>: <span class="string">"^1.0.6"</span>,</span><br><span class="line">    <span class="string">"hexo-renderer-ejs"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"hexo-renderer-marked"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="string">"hexo-renderer-stylus"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="string">"hexo-server"</span>: <span class="string">"^1.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打开博客根目录，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm outdated</span><br></pre></td></tr></table></figure>
<p>查看哪些依赖和插件需要更新</p>
<p>果不其然，暂时还没有，毕竟才开始做没几天。</p>
<p>未完，待续，，，查一波资料再继续，等下捅娄子了，，，</p>
<p>更新完成啦，具体更新过程，找个时间再详述吧。</p>
]]></content>
      <tags>
        <tag>博客升级</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-添加网站运行时间</title>
    <url>/2020/03/28/hexo-%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>这个小功能可以很好的记录自己博客运行的时间，并且可以根据自己需要更改文字。</p>
<a id="more"></a>

<p>这个小功能的实现非常的简单，按照如下步骤，就能轻松获取！<br>在 \themes\next\layout_partial\footer.ejs 文件下添加以下代码<br>（记得修改自己的建站时间！）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;span id=<span class="string">"timeDate"</span>&gt;载入天数...&lt;/span&gt;&lt;span id=<span class="string">"times"</span>&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date(); </span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">createtime</span></span>() &#123; </span><br><span class="line">        var grt= new Date(<span class="string">"03/01/2020 17:38:00"</span>);//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span><br><span class="line">        now.setTime(now.getTime()+250); </span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); </span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); </span><br><span class="line">        <span class="keyword">if</span>(String(hnum).length ==1 )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); </span><br><span class="line">        mnum = Math.floor(minutes); <span class="keyword">if</span>(String(mnum).length ==1 )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line">        snum = Math.round(seconds); <span class="keyword">if</span>(String(snum).length ==1 )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span><br><span class="line">        document.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span><br><span class="line">        document.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(<span class="string">"createtime()"</span>,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 卡通图贴（看板娘）添加</title>
    <url>/2020/03/28/hexo-%E5%8D%A1%E9%80%9A%E5%9B%BE%E8%B4%B4%E6%B7%BB%E5%8A%A0/</url>
    <content><![CDATA[<p>博客美化之卡通图贴，如我的网页右下角就有一只小猫咪（hijiki），撸猫专属，它可以随着你的鼠标光标移动目光，枯燥乏味时还能撸猫，岂不美哉？作为经典博客美化方案，还不赶快学起来？</p>
<a id="more"></a>

<h2 id="hexo美化之–添加卡通图贴"><a href="#hexo美化之–添加卡通图贴" class="headerlink" title="hexo美化之–添加卡通图贴"></a>hexo美化之–添加卡通图贴</h2><p>首先检查站点目录下面的 package.json里是否有<br>“hexo-helper-live2d”: “^3.0.3”，如果已经有的话可以先卸载<br>然后在博客文件（我的是blogs文件夹，取决于你最初搭建网站建立的文件夹名字）右键选择Git Bash Here 进入命令窗口使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>等待完成</p>
<p>选择想要的卡通图贴：各个模型的预览请访问 <a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">原作者的博客</a></p>
<p>接下来添加模型文件有两种方案，我使用的是方案一：</p>
<h3 id="方案一-简单粗暴添加"><a href="#方案一-简单粗暴添加" class="headerlink" title="方案一   简单粗暴添加"></a>方案一   简单粗暴添加</h3><p>1、直接进入官网下载好所需模型：<br><a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">图贴模型github官网来源</a></p>
<p>2、然后打开下载好的live2d-widget-models-master文件夹中的packages文件夹，（live2d-widget-models-master\live2d-widget-models-master\packages）全部复制站点文件中的node_modules文件中</p>
<p>3、打开站点目录（我的是在blogs文件，不是主题next之类的文件夹）下的 _config.yml 文件，添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">卡通人物选择</span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-packages <span class="comment">#模型选择，更改自己喜欢的packages</span></span><br><span class="line">  display:</span><br><span class="line">    position: right  <span class="comment">#模型位置</span></span><br><span class="line">    width: 150       <span class="comment">#模型宽度</span></span><br><span class="line">    height: 300      <span class="comment">#模型高度</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span>      <span class="comment">#是否在手机端显示</span></span><br></pre></td></tr></table></figure>

<p>4、然后照常的：<br>清除数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  hexo clean</span><br></pre></td></tr></table></figure>
<p>生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  hexo g</span><br></pre></td></tr></table></figure>
<p>部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  hexo d</span><br></pre></td></tr></table></figure>



<h3 id="方案二-npm添加"><a href="#方案二-npm添加" class="headerlink" title="方案二    npm添加"></a>方案二    npm添加</h3><p>1、在博客文件（我的是blogs文件夹，取决于你最初搭建网站建立的文件夹名字）右键选择Git Bash Here 进入命令窗口使用命令输入以下命令来下载相应的模型，将 packagename 更换成模型名称即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install packagename</span><br></pre></td></tr></table></figure>

<p>2、打开站点目录（我的是在blogs文件，不是主题next之类的文件夹）下的 _config.yml 文件，添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">卡通人物选择</span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  model:</span><br><span class="line">  use: live2d-widget-model-packages <span class="comment">#模型选择，更改自己喜欢的packages</span></span><br><span class="line">  display:</span><br><span class="line">    position: right  <span class="comment">#模型位置</span></span><br><span class="line">    width: 150       <span class="comment">#模型宽度</span></span><br><span class="line">    height: 300      <span class="comment">#模型高度</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span>      <span class="comment">#是否在手机端显示</span></span><br></pre></td></tr></table></figure>

<p>3、然后照常的：<br>清除数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  hexo clean</span><br></pre></td></tr></table></figure>
<p>生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  hexo g</span><br></pre></td></tr></table></figure>
<p>部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  hexo d</span><br></pre></td></tr></table></figure>

<p>##到此，图贴添加完毕， 多刷新几次自己的博客网页，更新部署会有延迟，接着就能正常显示了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客美化</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>begin</category>
      </categories>
      <tags>
        <tag>begin</tag>
      </tags>
  </entry>
</search>
